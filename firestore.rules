/**
 * @file Firestore Security Rules for Medo.Ai Clock Application
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 * @dataStructure All user data and uploaded files are nested under the `/users/{userId}` path, with files further nested under `/users/{userId}/uploadedFiles/{fileId}`.
 * @keySecurityDecisions
 *   - Users can only access their own data.
 *   - Data validation is minimal, focusing on relational integrity (ownership).
 *   - List operations are restricted to the owner of the data.
 *   - Denormalization: The 'userId' field in 'UploadedFile' entities is used to enforce ownership, avoiding the need for complex lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User 'test_user' with ID 'test_user' can create their profile if authenticated.
     * @allow (get, update, delete) - User 'test_user' with ID 'test_user' can get, update, and delete their profile if authenticated.
     * @deny (create, get, update, delete) - User 'other_user' with ID 'other_user' cannot access user 'test_user' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify that the user is signed in
      allow create: if isSignedIn() && isSelfCreation(userId, request.auth.uid);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwnerIdImmutable(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for uploaded files. Only the authenticated user can manage their own uploaded files.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) - User 'test_user' with ID 'test_user' can upload a file with userId 'test_user'.
     * @allow (get, list, update, delete) - User 'test_user' with ID 'test_user' can access their uploaded files.
     * @deny (create, get, list, update, delete) - User 'other_user' with ID 'other_user' cannot access user 'test_user' uploaded files.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isOwnerIdImmutable(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSelfCreation(userId, authId) {
        return userId == authId;
    }

    function isOwnerIdImmutable(userId) {
        return request.resource.data.userId == resource.data.userId;
    }
  }
}