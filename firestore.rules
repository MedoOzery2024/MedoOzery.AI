/**
 * @fileoverview Firestore Security Rules for Medo.Ai Clock Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has exclusive access to their own profile data and uploaded files.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Uploaded files for each user are stored under `/users/{userId}/uploadedFiles/{fileId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile and files).
 * - No public listing of users or uploaded files is allowed.
 * - Data consistency between the path and document fields (userId) is enforced on creation and immutability is enforced on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access their own profile data if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user tries to create a profile.
     * @deny (get, update, delete) - An unauthenticated user tries to access a profile.
     * @deny (create) - Authenticated user attempts to create a profile with a userId that doesn't match their auth.uid.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for uploaded files.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) - Authenticated user can create a file if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access their own files if the userId matches their auth.uid.
     * @allow (list) - Authenticated user can list their own files.
     * @deny (create) - An unauthenticated user tries to create a file.
     * @deny (get, update, delete) - An unauthenticated user tries to access a file that they don't own.
     * @deny (create) - Authenticated user attempts to create a file with a userId that doesn't match their auth.uid.
     * @principle Enforces document ownership for writes; allows owner-only listing.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}