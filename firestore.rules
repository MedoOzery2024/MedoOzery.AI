/**
 * @file Firestore Security Rules for Medo.Ai Clock App.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user can only
 *  access their own profile data and the uploaded files associated with their account.
 *
 * @data_structure The data is structured hierarchically:
 *  - `/users/{userId}`: Stores user profile information.
 *  - `/users/{userId}/uploadedFiles/{fileId}`: Stores metadata for files uploaded by a specific user.
 *
 * @key_security_decisions
 *  - User listing is disallowed to prevent enumeration.
 *  - All write operations require a valid authenticated user.
 *
 * @denormalization_for_authorization
 *  - The `UploadedFile` entity includes a `userId` field to enable simple ownership checks
 *    without needing to query the `/users/{userId}` document.
 *
 * @structural_segregation The app uses a hierarchical structure (/users/{userId}/uploadedFiles/{fileId})
 *  to keep public and private data isolated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the current user is signed in.
     * @details Returns true if request.auth is not null, indicating an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the current user is the owner of the resource.
     * @details Compares the requested userId with the authenticated user's UID.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the provided userId matches the authenticated user's UID, false otherwise.
     * @example isOwner("user123") returns true if request.auth.uid == "user123".
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the current user is the existing owner of the resource.
     * @details Combines ownership check with existence check to avoid modifying non-existent documents.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the provided userId matches the authenticated user's UID and the resource exists, false otherwise.
     * @example isExistingOwner("user123") returns true if request.auth.uid == "user123" and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the user ID in the resource data matches the user ID in the path.
     * @param {string} userId The user ID from the path.
     * @return {bool} True if the user ID in the request data matches the user ID in the path.
     */
    function validateUserId(userId) {
      return request.resource.data.id == userId;
    }


    /**
     * @description Security rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     *    Request: auth.uid = 'user123', path = '/users/user123'
     * @allow (get) - User with ID 'user123' can read their own profile.
     *    Request: auth.uid = 'user123', path = '/users/user123'
     * @allow (update) - User with ID 'user123' can update their own profile.
     *    Request: auth.uid = 'user123', path = '/users/user123'
     * @allow (delete) - User with ID 'user123' can delete their own profile.
     *    Request: auth.uid = 'user123', path = '/users/user123'
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     *    Request: auth.uid = 'user456', path = '/users/user123'
     * @deny (get) - User with ID 'user456' cannot read the profile of 'user123'.
     *    Request: auth.uid = 'user456', path = '/users/user123'
     * @principle Enforces document ownership, allowing users to manage their own profiles.
     */
    match /users/{userId} {
      // Get and List
      allow get: if isOwner(userId);
      allow list: if false;

      // Create
      allow create: if isOwner(userId) && validateUserId(userId);

      // Update
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Delete
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/uploadedFiles/{fileId} collection.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) - User with ID 'user123' can create a file under their profile.
     *    Request: auth.uid = 'user123', path = '/users/user123/uploadedFiles/file1'
     * @allow (get) - User with ID 'user123' can read a file under their profile.
     *    Request: auth.uid = 'user123', path = '/users/user123/uploadedFiles/file1'
     * @allow (update) - User with ID 'user123' can update a file under their profile.
     *    Request: auth.uid = 'user123', path = '/users/user123/uploadedFiles/file1'
     * @allow (delete) - User with ID 'user123' can delete a file under their profile.
     *    Request: auth.uid = 'user123', path = '/users/user123/uploadedFiles/file1'
     * @deny (create) - User with ID 'user456' cannot create a file under 'user123's profile.
     *    Request: auth.uid = 'user456', path = '/users/user123/uploadedFiles/file1'
     * @deny (get) - User with ID 'user456' cannot read a file under 'user123's profile.
     *    Request: auth.uid = 'user456', path = '/users/user123/uploadedFiles/file1'
     * @principle Enforces document ownership, allowing users to manage their own uploaded files.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      // Get and List
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Create
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Update
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;

      // Delete
      allow delete: if isExistingOwner(userId);
    }
  }
}