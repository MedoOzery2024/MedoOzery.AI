/**
 * @file Firestore Security Rules for Medo.Ai Clock App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and uploaded files.
 * Only authenticated users can access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Uploaded files for each user are stored under `/users/{userId}/uploadedFiles/{fileId}`.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied by not providing a `list` rule on the `/users` collection.
 * - All write operations are restricted to the owner of the data.
 *
 * Denormalization for Authorization:
 * - The `userId` is present both in the path (`/users/{userId}/...`) and within the `UploadedFile` document itself.
 *   The rules validate that these two IDs match on creation and that the internal `userId` field remains immutable on updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to uploaded files, enforcing user-specific ownership.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) - Authenticated user creates a new file with a matching userId.
     * @allow (get, list, update, delete) - Authenticated user accesses and manages their own uploaded files.
     * @deny (create) - User attempts to create a file for another user.
     * @deny (get, list, update, delete) - User attempts to access another user's files.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}