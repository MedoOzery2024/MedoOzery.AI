{
  "entities": {
    "UploadedFile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UploadedFile",
      "type": "object",
      "description": "Represents an uploaded file stored within the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the uploaded file, generated by Firestore."
        },
        "fileName": {
          "type": "string",
          "description": "The original name of the uploaded file."
        },
        "fileType": {
          "type": "string",
          "description": "The MIME type of the uploaded file (e.g., 'image/jpeg', 'application/pdf')."
        },
        "fileSize": {
          "type": "number",
          "description": "The size of the uploaded file in bytes."
        },
        "uploadDate": {
          "type": "string",
          "description": "The date and time when the file was uploaded.",
          "format": "date-time"
        },
        "storageLocation": {
          "type": "string",
          "description": "The location where the file is stored (e.g., a cloud storage URL or a local file path).",
          "format": "uri"
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who uploaded this file. (Relationship: User 1:N UploadedFile)"
        }
      },
      "required": [
        "id",
        "fileName",
        "fileType",
        "fileSize",
        "uploadDate",
        "storageLocation",
        "userId"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "userName": {
          "type": "string",
          "description": "The username of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "userName",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data. Path-based ownership ensures only the user can access their profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/uploadedFiles/{fileId}",
        "definition": {
          "entityName": "UploadedFile",
          "schema": {
            "$ref": "#/backend/entities/UploadedFile"
          },
          "description": "Stores uploaded file metadata. Path-based ownership ensures only the user can access their files.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who uploaded the file."
            },
            {
              "name": "fileId",
              "description": "The unique identifier of the uploaded file."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed to efficiently store user data and uploaded files for the Medo.Ai Clock application. It emphasizes security, scalability, and ease of management, adhering to the principles of Authorization Independence, Structural Segregation, and Access Modeling.  Specifically, the structure allows individual users to store and manage their own files, and the design supports performant list operations. It also supports atomic operations via the path based ownership model.\n\nThe structure leverages path-based ownership for files, placing them under `/users/{userId}/uploadedFiles/{fileId}`. This ensures that only the user who owns the files can access them, enforcing a clear and easily understandable security posture.  There are no authorization dependencies so all CRUD operations are atomic.\n\nQAPs are achieved by using path-based ownership, because the security rules can easily scope the results of a `list` operation to the files owned by the requesting user."
  }
}
